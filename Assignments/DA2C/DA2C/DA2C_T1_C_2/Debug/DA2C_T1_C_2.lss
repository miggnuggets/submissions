
DA2C_T1_C_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000152  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000068d  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000607  00000000  00000000  00000871  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000023e  00000000  00000000  00000e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  000010b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000034f  00000000  00000000  000010dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000142b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 6d 00 	jmp	0xda	; 0xda <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#define F_CPU 16000000UL
#include<util/delay.h>
int overflow = 0;
int main()
{
	DDRB |= (1<<2); 				// Set PORTB2 as output
  90:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1<<2); 				// LED off
  92:	2a 9a       	sbi	0x05, 2	; 5
	DDRC &= (0<<2);				// Set PORTC switch
  94:	87 b1       	in	r24, 0x07	; 7
  96:	17 b8       	out	0x07, r1	; 7
	PORTC |= (1<<2); 				// Enable pull up
  98:	42 9a       	sbi	0x08, 2	; 8

	TCCR0A = 0;
  9a:	14 bc       	out	0x24, r1	; 36
	TCCR0B = (1 << CS02) | (1 << CS00);	// Prescaler 1024
  9c:	85 e0       	ldi	r24, 0x05	; 5
  9e:	85 bd       	out	0x25, r24	; 37
			overflow = 0;
			TCNT0 = 0;
		}
		while ((TIFR0 & 0x01) == 0); // Counts overflow
		TCNT0 = 0x00;		// Reset counter
		TIFR0 = 0x01;		// Reset overflow
  a0:	21 e0       	ldi	r18, 0x01	; 1
		overflow++;			// Increase overflow
		if (overflow <= 67)	// LED on
		PORTB = (0 << DDB2);
		else PORTB = (1 << DDB2);	// LED off
  a2:	34 e0       	ldi	r19, 0x04	; 4
	PORTC |= (1<<2); 				// Enable pull up

	TCCR0A = 0;
	TCCR0B = (1 << CS02) | (1 << CS00);	// Prescaler 1024
	while (1) {
		if (!(PINC & (1<<PINC1)))
  a4:	31 99       	sbic	0x06, 1	; 6
  a6:	05 c0       	rjmp	.+10     	; 0xb2 <main+0x22>
		{
			overflow = 0;
  a8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  ac:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			TCNT0 = 0;
  b0:	16 bc       	out	0x26, r1	; 38
		}
		while ((TIFR0 & 0x01) == 0); // Counts overflow
  b2:	a8 9b       	sbis	0x15, 0	; 21
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <main+0x22>
		TCNT0 = 0x00;		// Reset counter
  b6:	16 bc       	out	0x26, r1	; 38
		TIFR0 = 0x01;		// Reset overflow
  b8:	25 bb       	out	0x15, r18	; 21
		overflow++;			// Increase overflow
  ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  be:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  c2:	01 96       	adiw	r24, 0x01	; 1
  c4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		if (overflow <= 67)	// LED on
  cc:	84 34       	cpi	r24, 0x44	; 68
  ce:	91 05       	cpc	r25, r1
  d0:	14 f4       	brge	.+4      	; 0xd6 <main+0x46>
		PORTB = (0 << DDB2);
  d2:	15 b8       	out	0x05, r1	; 5
  d4:	e7 cf       	rjmp	.-50     	; 0xa4 <main+0x14>
		else PORTB = (1 << DDB2);	// LED off
  d6:	35 b9       	out	0x05, r19	; 5
  d8:	e5 cf       	rjmp	.-54     	; 0xa4 <main+0x14>

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
